{"version":3,"sources":["../webpack/bootstrap","../external \"fs\"","../external \"path\"","../external \"os\"","../external \"child_process\"",".././src/utils.ts",".././src/extension.ts","../external \"vscode\"","../external \"crypto\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","path","os","fs","product","getWSLExecutablePath","useWSLexe","osVersion","exec","release","buildNumber","length","parseInt","getWindowsBuildNumber","is32ProcessOn64Windows","process","env","systemRoot","join","getProductConfiguration","appRoot","content","readFileSync","toString","JSON","parse","vscode","cp","crypto","utils_1","startPromise","IS_DEV","AGENT_DEBUG_PORT","DAEMON_PATH","__dirname","outputChannel","undefined","output","wslInstalled","showLog","terminal","show","window","createTerminalRenderer","write","forEach","writeToOutput","str","isError","lines","split","line","writeLineToOutput","Date","toISOString","replace","trim","push","activate","context","subscriptions","userDataDir","dirname","logPath","workspace","registerRemoteAuthorityResolver","Resolver","extensionPath","commands","registerCommand","async","executable","existsSync","executeCommand","remoteAuthority","documentation","showErrorMessage","openExternal","Uri","[object Object]","extensionLocation","userDataDirDigest","createHash","update","digest","this","_pipeName","version","_extensionLocation","authority","withProgress","location","ProgressLocation","Notification","title","cancellable","progress","_resolve","_authority","platform","Promise","reject","RemoteAuthorityResolverError","NotAvailable","report","message","started","res","rej","handleError","result","modal","actions","isDirty","textDocuments","some","workspaceFile","scheme","execute","reuseWindow","isCloseAffordance","getActions","handleMessage","msg","type","increment","data","ifaces","networkInterfaces","ownIps","ifname","info","address","host","ipAddresses","addr","port","ResolvedAuthority","getResolvedAuthority","Error","agentEnvironment","keys","variable","pid","getConfiguration","agentForkOpts","stdio","detached","execArgv","cwd","extHostProcess","fork","stdout","on","lineFeedIndex","indexOf","substr","checkOutput","stderr","error","String","code","e"],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"os\");","module.exports = require(\"child_process\");","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'path';\nimport * as os from 'os';\nimport * as fs from 'fs';\n\nexport function getWSLExecutablePath(): string | undefined {\n\tlet useWSLexe = getWindowsBuildNumber() >= 16299;\n\tconst is32ProcessOn64Windows = process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n\tconst systemRoot = process.env['SystemRoot'];\n\tif (systemRoot) {\n\t\treturn path.join(systemRoot, is32ProcessOn64Windows ? 'Sysnative' : 'System32', useWSLexe ? 'wsl.exe' : 'bash.exe');\n\t}\n\treturn undefined;\n\n}\n\nfunction getWindowsBuildNumber(): number {\n\tconst osVersion = (/(\\d+)\\.(\\d+)\\.(\\d+)/g).exec(os.release());\n\tlet buildNumber: number = 0;\n\tif (osVersion && osVersion.length === 4) {\n\t\tbuildNumber = parseInt(osVersion[3]);\n\t}\n\treturn buildNumber;\n}\n\nexport interface IProductConfiguration {\n\tcommit: string;\n\tquality: string;\n}\n\nlet product: IProductConfiguration;\n\nexport function getProductConfiguration(appRoot: string): IProductConfiguration {\n\tif (!product) {\n\t\tconst content = fs.readFileSync(path.join(appRoot, 'product.json')).toString();\n\t\tproduct = JSON.parse(content) as IProductConfiguration;\n\t}\n\treturn product;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport * as cp from 'child_process';\nimport * as path from 'path';\nimport * as crypto from 'crypto';\nimport * as os from 'os';\nimport * as fs from 'fs';\nimport { ServerToClientMessage, PortResolvedMessage } from './wslDaemon';\nimport { getWSLExecutablePath } from './utils';\n\nlet startPromise: Promise<vscode.ResolvedAuthority> | undefined = void 0;\n\nconst IS_DEV = !!process.env['VSCODE_DEV'];\nconst AGENT_DEBUG_PORT = process.env['VSCODE_WSL_AGENT_DEBUG_PORT'] || (IS_DEV ? '15870' : '');\nconst DAEMON_PATH = path.join(__dirname, 'wslDaemon.js');\n\nlet outputChannel: vscode.TerminalRenderer | undefined = undefined;\nlet output: string[] = [];\n\nlet wslInstalled = false;\n\nexport function activate(context: vscode.ExtensionContext) {\n\tconst subscriptions = context.subscriptions;\n\n\tconst userDataDir = path.dirname(path.dirname(path.dirname(context.logPath)));\n\tsubscriptions.push(vscode.workspace.registerRemoteAuthorityResolver('wsl', new Resolver(userDataDir, context.extensionPath)));\n\n\tsubscriptions.push(vscode.commands.registerCommand('remote-wsl.newWindow', async () => {\n\t\tif (!wslInstalled) {\n\t\t\tconst executable = getWSLExecutablePath();\n\t\t\twslInstalled = !!executable && fs.existsSync(executable);\n\t\t\tif (!wslInstalled && executable) {\n\t\t\t\twriteLineToOutput(`WSL executable not found at ${executable}`);\n\t\t\t}\n\t\t}\n\t\tif (wslInstalled) {\n\t\t\tvscode.commands.executeCommand('vscode.newWindow', { remoteAuthority: 'wsl+default' });\n\t\t} else {\n\t\t\tconst documentation = 'Documentation';\n\t\t\tconst response = await vscode.window.showErrorMessage('WSL executable not found. Please make sure that WSL is installed.', documentation);\n\t\t\tif (response === documentation) {\n\t\t\t\tvscode.env.openExternal(vscode.Uri.parse('https://aka.ms/vscode-remote/wsl/install-wsl'));\n\t\t\t}\n\t\t}\n\t}));\n\tsubscriptions.push(vscode.commands.registerCommand('remote-wsl.showLog', () => {\n\t\tshowLog();\n\t}));\n\tsubscriptions.push(vscode.commands.registerCommand('remote-wsl.getHelp', async () => {\n\t\treturn vscode.env.openExternal(vscode.Uri.parse('https://aka.ms/vscode-remote/wsl'));\n\t}));\n\tsubscriptions.push(vscode.commands.registerCommand('remote-wsl.getStarted', async () => {\n\t\treturn vscode.env.openExternal(vscode.Uri.parse('https://aka.ms/vscode-remote/wsl/getting-started'));\n\t}));\n\tsubscriptions.push(vscode.commands.registerCommand('remote-wsl.provideFeedback', async () => {\n\t\treturn vscode.env.openExternal(vscode.Uri.parse('https://aka.ms/vscode-remote/wsl/provide-feedback'));\n\t}));\n\tsubscriptions.push(vscode.commands.registerCommand('remote-wsl.reportIssue', async () => {\n\t\treturn vscode.commands.executeCommand('vscode.openIssueReporter', 'ms-vscode-remote.remote-wsl');\n\t}));\n}\n\nfunction showLog() {\n\tif (!outputChannel) {\n\t\toutputChannel = vscode.window.createTerminalRenderer('WSL');\n\t\toutputChannel.terminal.show();\n\n\t\tconst write = (o: string) => outputChannel!.write(o);\n\t\toutput.forEach(write);\n\t\toutput.length = 0;\n\t} else {\n\t\toutputChannel.terminal.show();\n\t}\n\n}\n\nfunction writeToOutput(str: string, isError = false) {\n\tconst lines = str.split(/\\r?\\n/);\n\tfor (let i = 0; i < lines.length; i++) {\n\t\tconst line = lines[i];\n\t\tif (line.length || i < lines.length - 1) {\n\t\t\twriteLineToOutput(line, isError);\n\t\t}\n\t}\n}\n\nfunction writeLineToOutput(line: string, isError = false) {\n\tconst stamp = new Date().toISOString().replace(/[TZ]/g, ' ').trim();\n\tconst str = `[\\u001b[32m${stamp}\\u001b[0m] ${isError ? '\\u001b[31m' : ''}${line}\\r\\n`;\n\tif (outputChannel) {\n\t\toutputChannel.write(str);\n\t} else {\n\t\toutput.push(str);\n\t}\n}\n\nfunction getResolvedAuthority(msg: PortResolvedMessage) {\n\tconst ifaces = os.networkInterfaces();\n\tconst ownIps: { [addr: string]: boolean } = {};\n\tfor (let ifname in ifaces) {\n\t\tfor (let info of ifaces[ifname]) {\n\t\t\townIps[info.address] = true;\n\t\t}\n\t}\n\tlet host = 'localhost';\n\tif (msg.ipAddresses.length && !msg.ipAddresses.some(addr => ownIps[addr])) {\n\t\thost = msg.ipAddresses[0]; // use IP for VM mode\n\n\t}\n\twriteLineToOutput(`WSL resolver response: ${host}:${msg.port}`);\n\treturn new vscode.ResolvedAuthority(host, msg.port);\n}\n\nclass Resolver implements vscode.RemoteAuthorityResolver {\n\n\tprivate readonly _pipeName: string;\n\tprivate readonly _extensionLocation: string;\n\n\tconstructor(userDataDir: string, extensionLocation: string) {\n\t\tlet userDataDirDigest = crypto.createHash('sha1').update(userDataDir).digest('hex');\n\t\tthis._pipeName = `\\\\\\\\.\\\\pipe\\\\vscode-wsl-${userDataDirDigest}-${vscode.version}-sock`;\n\t\tthis._extensionLocation = extensionLocation;\n\t}\n\n\tpublic resolve(authority: string): Thenable<vscode.ResolvedAuthority> {\n\t\treturn vscode.window.withProgress({\n\t\t\tlocation: vscode.ProgressLocation.Notification,\n\t\t\ttitle: 'Installing VS Code Server in WSL ([details](command:remote-wsl.showLog))',\n\t\t\tcancellable: false\n\t\t}, (progress) => this._resolve(authority, progress));\n\t}\n\n\tprivate _resolve(_authority: string, progress: vscode.Progress<{ message?: string; increment?: number }>): Promise<vscode.ResolvedAuthority> {\n\t\tif (process.platform !== 'win32') {\n\t\t\treturn Promise.reject(vscode.RemoteAuthorityResolverError.NotAvailable('WSL is only supported on Windows'));\n\t\t}\n\n\t\t// We aleady have one running.\n\t\tif (startPromise) {\n\t\t\treturn startPromise;\n\t\t}\n\n\t\t// start up\n\t\twriteLineToOutput('Starting VS Code Server inside WSL.');\n\t\tprogress.report({ message: 'Starting Linux Subsystem' });\n\n\t\tlet started = false;\n\n\t\tstartPromise = new Promise((res, rej) => {\n\n\t\t\tlet handleError = async (message: string) => {\n\t\t\t\twriteLineToOutput(message, true);\n\t\t\t\tif (!started) {\n\t\t\t\t\tstarted = true;\n\t\t\t\t\tshowLog();\n\t\t\t\t\tmessage += '\\r\\nCheck WSL terminal for more details.';\n\t\t\t\t\tconst result = await vscode.window.showErrorMessage(message, { modal: true }, ...getActions());\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tawait result.execute();\n\t\t\t\t\t}\n\n\t\t\t\t\trej(vscode.RemoteAuthorityResolverError.NotAvailable(message, true));\n\n\t\t}\n\t\t\t};\n\n\t\t\tlet handleMessage = (msg: ServerToClientMessage) => {\n\t\t\t\tswitch (msg.type) {\n\t\t\t\t\tcase 'progressMessage':\n\t\t\t\t\t\tprogress.report({ increment: msg.increment, message: msg.message });\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'stdoutMessage':\n\t\t\t\t\t\twriteToOutput(msg.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'stderrMessage':\n\t\t\t\t\t\twriteToOutput(msg.data, true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'portResolved':\n\t\t\t\t\t\tif (!started) {\n\t\t\t\t\t\t\tstarted = true;\n\t\t\t\t\t\t\tres(getResolvedAuthority(msg));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'fatalErrorOccured':\n\t\t\t\t\t\thandleError(msg.message);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Received unexpected message!`);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlet output = '';\n\t\t\tconst checkOutput = () => {\n\t\t\t\tlet lineFeedIndex;\n\t\t\t\twhile ((lineFeedIndex = output.indexOf('\\n')) > 0) {\n\t\t\t\t\tlet msg = <ServerToClientMessage>JSON.parse(output.substr(0, lineFeedIndex));\n\t\t\t\t\toutput = output.substr(lineFeedIndex + 1);\n\t\t\t\t\thandleMessage(msg);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tconst agentEnvironment: { [key: string]: string | number | boolean | undefined; } = {};\n\t\t\t\tObject.keys(process.env).forEach((variable) => {\n\t\t\t\t\tagentEnvironment[variable] = process.env[variable];\n\t\t\t\t});\n\t\t\t\tagentEnvironment['VSCODE_WSL_AGENT_DEBUG_PORT'] = AGENT_DEBUG_PORT;\n\t\t\t\tagentEnvironment['VSCODE_WSL_PIPE_NAME'] = this._pipeName;\n\t\t\t\tagentEnvironment['VSCODE_WSL_EXT_HOST_PID'] = process.pid;\n\t\t\t\tagentEnvironment['VSCODE_WSL_EXT_LOCATION'] = this._extensionLocation;\n\t\t\t\tagentEnvironment['VSCODE_WSL_APP_ROOT'] = vscode.env.appRoot;\n\t\t\t\tif (enableTelemetry()) {\n\t\t\t\t\tagentEnvironment['VSCODE_WSL_ENABLE_TELEMETRY'] = true;\n\t\t\t\t}\n\t\t\t\tconst agentForkOpts = {\n\t\t\t\t\tstdio: ['pipe', 'pipe', 'pipe', 'ipc'],\n\t\t\t\t\tdetached: true,\n\t\t\t\t\tenv: agentEnvironment,\n\t\t\t\t\texecArgv: [],\n\t\t\t\t\tcwd: process.cwd()\n\t\t\t\t};\n\t\t\t\tconst extHostProcess = cp.fork(DAEMON_PATH, [], agentForkOpts);\n\n\t\t\t\textHostProcess.stdout.on('data', (data: Buffer) => {\n\t\t\t\t\toutput += data.toString();\n\t\t\t\t\tcheckOutput();\n\t\t\t\t});\n\t\t\t\textHostProcess.stderr.on('data', (data: Buffer) => {\n\t\t\t\t\twriteToOutput(data.toString());\n\t\t\t\t});\n\t\t\t\textHostProcess.on('error', (error: Error) => {\n\t\t\t\t\thandleError(String(error));\n\t\t\t\t});\n\t\t\t\textHostProcess.on('close', (code: number) => {\n\t\t\t\t\thandleError(`WSL Daemon exited with code ${code}`);\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\thandleError('Problems starting WSL Daemon: ' + (e && e.message || ''));\n\t\t\t}\n\t\t});\n\t\treturn startPromise;\n\t}\n}\n\nfunction enableTelemetry(): boolean {\n\treturn !!vscode.workspace.getConfiguration().get('telemetry.enableTelemetry');\n}\n\ntype ActionItem = (vscode.MessageItem & { execute: () => void; });\n\nfunction getActions(): ActionItem[] {\n\tconst actions: ActionItem[] = [];\n\tconst isDirty = vscode.workspace.textDocuments.some(d => d.isDirty) || vscode.workspace.workspaceFile && vscode.workspace.workspaceFile.scheme === 'untitled';\n\n\tactions.push({\n\t\ttitle: 'Retry',\n\t\texecute: async () => {\n\t\t\tawait vscode.commands.executeCommand('workbench.action.reloadWindow');\n\t\t}\n\t});\n\tif (!isDirty) {\n\t\tactions.push({\n\t\t\ttitle: 'Close Remote',\n\t\t\texecute: async () => {\n\t\t\t\tawait vscode.commands.executeCommand('vscode.newWindow', { reuseWindow: true });\n\t\t\t}\n\t\t});\n\t}\n\tactions.push({\n\t\ttitle: 'Ignore',\n\t\tisCloseAffordance: true,\n\t\texecute: async () => {\n\t\t\tvscode.commands.executeCommand('remote-wsl.showLog'); // no need to wait\n\t\t}\n\t});\n\treturn actions;\n}\n\n","module.exports = require(\"vscode\");","module.exports = require(\"crypto\");"],"sourceRoot":""}